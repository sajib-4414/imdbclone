events { }
http {
    server {
        listen 80;
        server_name localhost;

        location /static/ {
            alias /app/static/;
        }

        location / {
           
            proxy_pass http://client-service:3000; 

            #below code is for accepting websocket connections from react app container, for hotload
            proxy_set_header HOST $host;
            proxy_set_header X-Forwarded-Host $http_host;

            proxy_set_header Upgrade $http_upgrade;
            proxy_http_version 1.1;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }

        location /auth/ {
            add_header Content-Type text/plain;
            add_header 'Access-Control-Allow-Origin' '*'  always;
            add_header 'Access-Control-Max-Age' '3600'  always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        
            if ($request_method = OPTIONS ) {
                return 200;
            }

            # internal;
            proxy_pass http://auth-service:8003/; ##******* YOU NEED THIS TRAILING SLASH, as fastapi paths are / or /api like this
        }

        #opening user service to everyone       
        location /user-service {
            proxy_pass http://user-service:8000; #must use the container's listening port, not the port exposed outside
        }
        
        # # only if user is accessing registration url, then allow unauthenticated
        # location /user-service/api/v1/account/register {
        #     proxy_pass http://user-service:8000;
        # }
        #otherwise even user service's all url is also protected
        # location /user-service {
        #     auth_request /auth/;
        #     proxy_pass http://user-service:8000; #must use the container's listening port, not the port exposed outside
        # }

        location /movie-service/ {
            auth_request /auth/;
            #taking X-Username from auth FastAPI service and storing to $username
            auth_request_set $username  $upstream_http_x_username;
            proxy_pass http://movie-service:8000;#must use the container's listening port, not the port exposed outside
            # Passing to movie service with X-Username as header name, receive in movie
            #service as HTTP_X_USERNAME
            proxy_set_header X-Username $username ;
        }

        location /docs {
            proxy_pass http://swagger-ui:3002; #must use the container's listening port, not the port exposed outside
        }

        # Add other location blocks for additional services as needed.
    }
}